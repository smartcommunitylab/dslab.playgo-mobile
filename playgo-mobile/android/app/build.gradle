apply plugin: 'com.android.application'

Project background_geolocation = project(':transistorsoft-capacitor-background-geolocation')
apply from: "${background_geolocation.projectDir}/app.gradle"

android {
    def secretProperties = new Properties()
    file("../../secrets/secrets-android.properties").withInputStream {
      secretProperties.load(it)
    }

    signingConfigs {
      production {
        storeFile file('../../secrets/playgomulti.keystore')
        keyAlias 'playgomulti'
        storePassword secretProperties['PRODUCTION_STORE_PASSWORD']
        keyPassword secretProperties['PRODUCTION_KEY_PASSWORD']
      }
      stage {
        storeFile file('../../secrets/playgomulti_stage.keystore')
        keyAlias 'playgomultiStage'
        storePassword secretProperties['PRODUCTION_STORE_PASSWORD']
        keyPassword secretProperties['PRODUCTION_KEY_PASSWORD']
      }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        flavorDimensions "version"
        productFlavors {
            stage {
              applicationId "it.dslab.playgo.stage"
              manifestPlaceholders = [
                displayName:"PlayGo - Stage",
                customUrlScheme:"it.dslab.playgo.stage"
              ]
              signingConfig signingConfigs.stage
            }
            production {
              applicationId "it.dslab.playgo"
              manifestPlaceholders = [
                displayName:"PlayGo",
                customUrlScheme:"it.dslab.playgo"
              ]
              signingConfig signingConfigs.production
            }
        }
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 100
        versionName "0.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // [background-geolocation] Proguard-rules
            proguardFiles "${background_geolocation.projectDir}/proguard-rules.pro"
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
