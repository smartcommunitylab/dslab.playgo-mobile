/**
 * Play&Go Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable, of } from 'rxjs';

import { PageNotification } from '../model/pageNotification';
import { UserSignature } from '../model/userSignature';

@Injectable({
  providedIn: 'root',
})
export class CommunicationAccountControllerService {
  constructor(private http: HttpClient) {}
  /**
   * getPlayerNotifications
   *
   * @param page Results page you want to retrieve (0..N)
   * @param size Number of records per page
   * @param since since
   * @param sort Sorting option: field,[asc,desc]
   */
  public getPlayerNotificationsUsingGET(args: {
    page: number;
    size: number;
    since?: number;
    sort?: string;
  }): Observable<PageNotification> {
    const { page, size, since, sort } = args;
    const pagenotif = {
      content: [
        {
          campaignId: 'string',
          channelIds: ['string'],
          content: {},
          description: 'string',
          id: 'string',
          labelIds: ['string'],
          playerId: 'string',
          readed: true,
          starred: true,
          territoryId: 'string',
          timestamp: 0,
          title: 'string',
          updateTime: 0,
          version: 0,
        },
        {
          campaignId: 'string',
          channelIds: ['string'],
          content: {},
          description: 'string',
          id: 'string',
          labelIds: ['string'],
          playerId: 'string',
          readed: true,
          starred: true,
          territoryId: 'string',
          timestamp: 0,
          title: 'string',
          updateTime: 0,
          version: 0,
        },
      ],
      empty: true,
      first: true,
      last: true,
      number: 0,
      numberOfElements: 0,
      pageable: {
        page: 0,
        size: 0,
        sort: 'string',
      },
      size: 0,
      sort: {
        empty: true,
        sorted: true,
        unsorted: true,
      },
      totalElements: 0,
      totalPages: 0,
    };
    return of(pagenotif);
    // this.http.request<PageNotification>(
    //   'get',
    //   environment.serverUrl.api + `/playandgo/api/app/notifications`,
    //   {
    //     params: removeNullOrUndefined({
    //       page,
    //       since,
    //       size,
    //       sort,
    //     }),
    //   }
    // );
  }

  /**
   * registerUserToPush
   *
   * @param body
   */
  public registerUserToPushUsingPOST(
    body?: UserSignature
  ): Observable<boolean> {
    console.log('registerUserToPushUsingPOST', body);
    return this.http.request<boolean>(
      'post',
      environment.serverUrl.api + `/playandgo/api/app/register`,
      {
        body,
      }
    );
  }
}

function removeNullOrUndefined(obj: any) {
  const newObj: any = {};
  Object.keys(obj).forEach((key) => {
    if (obj[key] != null) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
