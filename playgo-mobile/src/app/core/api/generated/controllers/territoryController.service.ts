/**
 * Play&Go Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

import { Territory } from '../model/territory';

@Injectable({
  providedIn: 'root',
})
export class TerritoryControllerService {
  constructor(private http: HttpClient) { }
  /**
   * deleteTerritory
   *
   * @param territoryId territoryId
   */
  public deleteTerritoryUsingDELETE(
    territoryId: string
  ): Observable<Territory> {
    return this.http.request<Territory>(
      'delete',
      environment.serverUrl.api +
      `/playandgo/api/territory/${encodeURIComponent(String(territoryId))}`,
      {}
    );
  }

  /**
   * getTerritories
   *
   */
  public getTerritoriesUsingGET(): Observable<Array<Territory>> {
    return this.http.request<Array<Territory>>(
      'get',
      environment.serverUrl.api + `/playandgo/api/territory`,
      {}
    );
  }

  /**
   * getTerritory
   *
   * @param territoryId territoryId
   */
  public getTerritoryUsingGET(territoryId: string): Observable<Territory> {
    return this.http.request<Territory>(
      'get',
      environment.serverUrl.api +
      `/playandgo/api/territory/${encodeURIComponent(String(territoryId))}`,
      {}
    );
  }

  /**
   * saveTerritory
   *
   * @param body
   */
  public saveTerritoryUsingPOST(body?: Territory): Observable<any> {
    return this.http.request<any>(
      'post',
      environment.serverUrl.api + `/playandgo/api/territory`,
      {
        body,
      }
    );
  }

  /**
   * updateTerritory
   *
   * @param body
   */
  public updateTerritoryUsingPUT(body?: Territory): Observable<any> {
    return this.http.request<any>(
      'put',
      environment.serverUrl.api + `/playandgo/api/territory`,
      {
        body,
      }
    );
  }
}

function removeNullOrUndefined(obj: any) {
  const newObj: any = {};
  Object.keys(obj).forEach((key) => {
    if (obj[key] != null) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
