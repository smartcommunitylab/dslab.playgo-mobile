/**
 * Play&Go Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

import { PagePlayerInfoConsole } from '../model/pagePlayerInfoConsole';
import { PageTrackedInstance } from '../model/pageTrackedInstance';
import { PlayerRole } from '../model/playerRole';

@Injectable({
  providedIn: 'root',
})
export class ConsoleControllerService {
  constructor(private http: HttpClient) {}
  /**
   * addCampaignManager
   *
   * @param userName userName
   * @param campaignId campaignId
   */
  public addCampaignManagerUsingPOST(
    userName: string,
    campaignId: string
  ): Observable<any> {
    return this.http.request<any>(
      'post',
      environment.serverUrl.api + `/playandgo/api/console/role/campaign`,
      {
        params: {
          userName,
          campaignId,
        },
      }
    );
  }

  /**
   * addTerritoryManager
   *
   * @param userName userName
   * @param territoryId territoryId
   */
  public addTerritoryManagerUsingPOST(
    userName: string,
    territoryId: string
  ): Observable<any> {
    return this.http.request<any>(
      'post',
      environment.serverUrl.api + `/playandgo/api/console/role/territory`,
      {
        params: {
          userName,
          territoryId,
        },
      }
    );
  }

  /**
   * getCampaignManager
   *
   * @param campaignId campaignId
   */
  public getCampaignManagerUsingGET(
    campaignId: string
  ): Observable<Array<PlayerRole>> {
    return this.http.request<Array<PlayerRole>>(
      'get',
      environment.serverUrl.api + `/playandgo/api/console/role/campaign`,
      {
        params: {
          campaignId,
        },
      }
    );
  }

  /**
   * getMyRoles
   *
   */
  public getMyRolesUsingGET(): Observable<Array<PlayerRole>> {
    return this.http.request<Array<PlayerRole>>(
      'get',
      environment.serverUrl.api + `/playandgo/api/console/role/my`,
      {}
    );
  }

  /**
   * getTerritoryManager
   *
   * @param territoryId territoryId
   */
  public getTerritoryManagerUsingGET(
    territoryId: string
  ): Observable<Array<PlayerRole>> {
    return this.http.request<Array<PlayerRole>>(
      'get',
      environment.serverUrl.api + `/playandgo/api/console/role/territory`,
      {
        params: {
          territoryId,
        },
      }
    );
  }

  /**
   * removeCampaignManager
   *
   * @param userName userName
   * @param campaignId campaignId
   */
  public removeCampaignManagerUsingDELETE(
    userName: string,
    campaignId: string
  ): Observable<any> {
    return this.http.request<any>(
      'delete',
      environment.serverUrl.api + `/playandgo/api/console/role/campaign`,
      {
        params: {
          userName,
          campaignId,
        },
      }
    );
  }

  /**
   * removeTerritoryManager
   *
   * @param userName userName
   * @param territoryId territoryId
   */
  public removeTerritoryManagerUsingDELETE(
    userName: string,
    territoryId: string
  ): Observable<any> {
    return this.http.request<any>(
      'delete',
      environment.serverUrl.api + `/playandgo/api/console/role/territory`,
      {
        params: {
          userName,
          territoryId,
        },
      }
    );
  }

  /**
   * searchPlayersByTerritory
   *
   * @param page Results page you want to retrieve (0..N)
   * @param size Number of records per page
   * @param territoryId territoryId
   * @param sort Sorting option: field,[asc,desc]
   * @param text text
   */
  public searchPlayersByTerritoryUsingGET(
    page: number,
    size: number,
    territoryId: string,
    sort?: string,
    text?: string
  ): Observable<PagePlayerInfoConsole> {
    return this.http.request<PagePlayerInfoConsole>(
      'get',
      environment.serverUrl.api + `/playandgo/api/console/player/search`,
      {
        params: {
          page,
          size,
          sort,
          territoryId,
          text,
        },
      }
    );
  }

  /**
   * searchTrackedInstance
   *
   * @param page Results page you want to retrieve (0..N)
   * @param size Number of records per page
   * @param territoryId territoryId
   * @param sort Sorting option: field,[asc,desc]
   * @param trackId trackId
   * @param playerId playerId
   * @param modeType modeType
   * @param dateFrom dateFrom
   * @param dateTo dateTo
   * @param campaignId campaignId
   * @param status status
   */
  public searchTrackedInstanceUsingGET(
    page: number,
    size: number,
    territoryId: string,
    sort?: string,
    trackId?: string,
    playerId?: string,
    modeType?: string,
    dateFrom?: Date,
    dateTo?: Date,
    campaignId?: string,
    status?: string
  ): Observable<PageTrackedInstance> {
    return this.http.request<PageTrackedInstance>(
      'get',
      environment.serverUrl.api + `/playandgo/api/console/track/search`,
      {
        params: {
          page,
          size,
          sort,
          territoryId,
          trackId,
          playerId,
          modeType,
          dateFrom,
          dateTo,
          campaignId,
          status,
        },
      }
    );
  }
}
