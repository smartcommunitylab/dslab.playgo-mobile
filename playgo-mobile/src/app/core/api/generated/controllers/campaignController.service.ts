/**
 * Play&Go Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

import { CampaignReq } from '../model/campaignReq';
import { CampaignRes } from '../model/campaignRes';
import { CampaignSubscription } from '../model/campaignSubscription';
import { Image } from '../model/image';
import { PlayerCampaign } from '../model/playerCampaign';

@Injectable({
  providedIn: 'root',
})
export class CampaignControllerService {
  constructor(private http: HttpClient) {}
  /**
   * addCampaign
   *
   * @param body
   */
  public addCampaignUsingPOST(body?: CampaignReq): Observable<any> {
    return this.http.request<any>(
      'post',
      environment.serverUrl.api + `/playandgo/api/campaign`,
      {
        body,
      }
    );
  }

  /**
   * addSurvey
   *
   * @param campaignId campaignId
   * @param name name
   * @param link link
   */
  public addSurveyUsingPOST(args: {
    campaignId: string;
    name: string;
    link: string;
  }): Observable<{ [key: string]: string }> {
    const { campaignId, name, link } = args;
    return this.http.request<{ [key: string]: string }>(
      'post',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(
          String(campaignId)
        )}/survey`,
      {
        params: removeNullOrUndefined({
          name,
          link,
        }),
      }
    );
  }

  /**
   * deleteCampaign
   *
   * @param campaignId campaignId
   */
  public deleteCampaignUsingDELETE(
    campaignId: string
  ): Observable<CampaignRes> {
    return this.http.request<CampaignRes>(
      'delete',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(String(campaignId))}`,
      {}
    );
  }

  /**
   * deleteSurvey
   *
   * @param campaignId campaignId
   * @param name name
   */
  public deleteSurveyUsingDELETE(args: {
    campaignId: string;
    name: string;
  }): Observable<{ [key: string]: string }> {
    const { campaignId, name } = args;
    return this.http.request<{ [key: string]: string }>(
      'delete',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(
          String(campaignId)
        )}/survey`,
      {
        params: removeNullOrUndefined({
          name,
        }),
      }
    );
  }

  /**
   * getCampaign
   *
   * @param campaignId campaignId
   */
  public getCampaignUsingGET(campaignId: string): Observable<CampaignRes> {
    return this.http.request<CampaignRes>(
      'get',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(String(campaignId))}`,
      {}
    );
  }

  /**
   * getCampaigns
   *
   * @param territoryId territoryId
   * @param type type
   */
  public getCampaignsUsingGET(args: {
    territoryId: string;
    type?: string;
  }): Observable<Array<CampaignRes>> {
    const { territoryId, type } = args;
    return this.http.request<Array<CampaignRes>>(
      'get',
      environment.serverUrl.api + `/playandgo/api/campaign`,
      {
        params: removeNullOrUndefined({
          territoryId,
          type,
        }),
      }
    );
  }

  /**
   * getMyCampaigns
   *
   */
  public getMyCampaignsUsingGET(): Observable<Array<PlayerCampaign>> {
    return this.http.request<Array<PlayerCampaign>>(
      'get',
      environment.serverUrl.api + `/playandgo/api/campaign/my`,
      {}
    );
  }

  /**
   * subscribeCampaign
   *
   * @param campaignId campaignId
   * @param body
   */
  public subscribeCampaignUsingPOST(args: {
    campaignId: string;
    body?: any;
  }): Observable<CampaignSubscription> {
    const { campaignId, body } = args;
    return this.http.request<CampaignSubscription>(
      'post',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(
          String(campaignId)
        )}/subscribe`,
      {
        body,
      }
    );
  }

  /**
   * unsubscribeCampaign
   *
   * @param campaignId campaignId
   */
  public unsubscribeCampaignUsingPUT(
    campaignId: string
  ): Observable<CampaignSubscription> {
    return this.http.request<CampaignSubscription>(
      'put',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(
          String(campaignId)
        )}/unsubscribe`,
      {}
    );
  }

  /**
   * updateCampaign
   *
   * @param body
   */
  public updateCampaignUsingPUT(body?: CampaignReq): Observable<any> {
    return this.http.request<any>(
      'put',
      environment.serverUrl.api + `/playandgo/api/campaign`,
      {
        body,
      }
    );
  }

  /**
   * uploadCampaignBanner
   *
   * @param campaignId campaignId
   * @param body
   */
  public uploadCampaignBannerUsingPOST(args: {
    campaignId: string;
    body?: Object;
  }): Observable<Image> {
    const { campaignId, body } = args;
    return this.http.request<Image>(
      'post',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(
          String(campaignId)
        )}/banner`,
      {
        body,
      }
    );
  }

  /**
   * uploadCampaignLogo
   *
   * @param campaignId campaignId
   * @param body
   */
  public uploadCampaignLogoUsingPOST(args: {
    campaignId: string;
    body?: Object;
  }): Observable<Image> {
    const { campaignId, body } = args;
    return this.http.request<Image>(
      'post',
      environment.serverUrl.api +
        `/playandgo/api/campaign/${encodeURIComponent(
          String(campaignId)
        )}/logo`,
      {
        body,
      }
    );
  }
}

function removeNullOrUndefined(obj: any) {
  const newObj: any = {};
  Object.keys(obj).forEach((key) => {
    if (obj[key] != null) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
