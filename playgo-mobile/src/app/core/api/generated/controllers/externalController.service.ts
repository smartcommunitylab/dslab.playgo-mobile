/**
 * Play&Go Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

import { CampaignGroupPlacing } from '../model/campaignGroupPlacing';
import { CampaignSubscription } from '../model/campaignSubscription';
import { GameStats } from '../model/gameStats';
import { PageCampaignPlacing } from '../model/pageCampaignPlacing';
import { PagePlayerInfo } from '../model/pagePlayerInfo';
import { PlayerInfo } from '../model/playerInfo';
import { TrackedInstanceInfo } from '../model/trackedInstanceInfo';

@Injectable({
  providedIn: 'root',
})
export class ExternalControllerService {
  constructor(private http: HttpClient) { }
  /**
   * addGroupPlayer
   *
   * @param campaignId campaignId
   * @param playerId playerId
   */
  public addGroupPlayerUsingPOST(args: {
    campaignId: string;
    playerId: string;
  }): Observable<PlayerInfo> {
    const { campaignId, playerId } = args;
    return this.http.request<PlayerInfo>(
      'post',
      environment.serverUrl.api + `/playandgo/api/ext/player/hsc`,
      {
        params: removeNullOrUndefined({
          campaignId,
          playerId,
        }),
      }
    );
  }

  /**
   * deleteGroupPlayer
   *
   * @param playerId playerId
   */
  public deleteGroupPlayerUsingDELETE(playerId: string): Observable<any> {
    return this.http.request<any>(
      'delete',
      environment.serverUrl.api + `/playandgo/api/ext/player/hsc`,
      {
        params: removeNullOrUndefined({
          playerId,
        }),
      }
    );
  }

  /**
   * deletePlayerSubscription
   *
   * @param playerId playerId
   * @param campaignId campaignId
   */
  public deletePlayerSubscriptionUsingDELETE(args: {
    playerId: string;
    campaignId: string;
  }): Observable<any> {
    const { playerId, campaignId } = args;
    return this.http.request<any>(
      'delete',
      environment.serverUrl.api + `/playandgo/api/ext/player/campaign/sub`,
      {
        params: removeNullOrUndefined({
          playerId,
          campaignId,
        }),
      }
    );
  }

  /**
   * getCampaignPlacing
   *
   * @param campaignId campaignId
   * @param body
   */
  public getCampaignPlacingUsingPOST(args: {
    campaignId: string;
    body?: Array<string>;
  }): Observable<{ [key: string]: number }> {
    const { campaignId, body } = args;
    return this.http.request<{ [key: string]: number }>(
      'post',
      environment.serverUrl.api + `/playandgo/api/ext/campaign/game/placing`,
      {
        body,
        params: removeNullOrUndefined({
          campaignId,
        }),
      }
    );
  }

  /**
   * getCampaingGroupPlacingByGame
   *
   * @param campaignId campaignId
   * @param page Results page you want to retrieve (0..N)
   * @param size Number of records per page
   * @param sort Sorting option: field,[asc,desc]
   * @param dateFrom yyyy-MM-dd
   * @param dateTo yyyy-MM-dd
   */
  public getCampaingGroupPlacingByGameUsingGET(args: {
    campaignId: string;
    page: number;
    size: number;
    sort?: string;
    dateFrom?: string;
    dateTo?: string;
  }): Observable<PageCampaignPlacing> {
    const { campaignId, page, size, sort, dateFrom, dateTo } = args;
    return this.http.request<PageCampaignPlacing>(
      'get',
      environment.serverUrl.api +
      `/playandgo/api/ext/campaign/game/group/placing`,
      {
        params: removeNullOrUndefined({
          campaignId,
          page,
          size,
          sort,
          dateFrom,
          dateTo,
        }),
      }
    );
  }

  /**
   * getPlayerCampaingGroupPlacingByGame
   *
   * @param campaignId campaignId
   * @param groupId groupId
   * @param dateFrom yyyy-MM-dd
   * @param dateTo yyyy-MM-dd
   */
  public getPlayerCampaingGroupPlacingByGameUsingGET(args: {
    campaignId: string;
    groupId: string;
    dateFrom?: string;
    dateTo?: string;
  }): Observable<CampaignGroupPlacing> {
    const { campaignId, groupId, dateFrom, dateTo } = args;
    return this.http.request<CampaignGroupPlacing>(
      'get',
      environment.serverUrl.api +
      `/playandgo/api/ext/campaign/game/group/placing/player`,
      {
        params: removeNullOrUndefined({
          campaignId,
          groupId,
          dateFrom,
          dateTo,
        }),
      }
    );
  }

  /**
   * getPlayerGameStats
   *
   * @param campaignId campaignId
   * @param groupId groupId
   * @param groupMode groupMode
   * @param dateFrom yyyy-MM-dd
   * @param dateTo yyyy-MM-dd
   */
  public getPlayerGameStatsUsingGET(args: {
    campaignId: string;
    groupId: string;
    groupMode: string;
    dateFrom: string;
    dateTo: string;
  }): Observable<Array<GameStats>> {
    const { campaignId, groupId, groupMode, dateFrom, dateTo } = args;
    return this.http.request<Array<GameStats>>(
      'get',
      environment.serverUrl.api +
      `/playandgo/api/ext/campaign/game/group/stats`,
      {
        params: removeNullOrUndefined({
          campaignId,
          groupId,
          groupMode,
          dateFrom,
          dateTo,
        }),
      }
    );
  }

  /**
   * getPlayer
   *
   * @param territory territory
   * @param playerId playerId
   */
  public getPlayerUsingGET(args: {
    territory: string;
    playerId: string;
  }): Observable<PlayerInfo> {
    const { territory, playerId } = args;
    return this.http.request<PlayerInfo>(
      'get',
      environment.serverUrl.api +
      `/playandgo/api/ext/territory/players/${encodeURIComponent(
        String(playerId)
      )}`,
      {
        params: removeNullOrUndefined({
          territory,
        }),
      }
    );
  }

  /**
   * getPlayersWithAvatar
   *
   * @param territory territory
   * @param players players
   */
  public getPlayersWithAvatarUsingGET(args: {
    territory: string;
    players: string;
  }): Observable<Array<PlayerInfo>> {
    const { territory, players } = args;
    return this.http.request<Array<PlayerInfo>>(
      'get',
      environment.serverUrl.api + `/playandgo/api/ext/territory/players/avatar`,
      {
        params: removeNullOrUndefined({
          territory,
          players,
        }),
      }
    );
  }

  /**
   * getTrackedInstanceInfo
   *
   * @param campaignId campaignId
   * @param playerId playerId
   * @param trackedInstanceId trackedInstanceId
   */
  public getTrackedInstanceInfoUsingGET(args: {
    campaignId: string;
    playerId: string;
    trackedInstanceId: string;
  }): Observable<TrackedInstanceInfo> {
    const { campaignId, playerId, trackedInstanceId } = args;
    return this.http.request<TrackedInstanceInfo>(
      'get',
      environment.serverUrl.api +
      `/playandgo/api/ext/track/${encodeURIComponent(
        String(campaignId)
      )}/${encodeURIComponent(String(playerId))}/${encodeURIComponent(
        String(trackedInstanceId)
      )}`,
      {}
    );
  }

  /**
   * searchPlayers
   *
   * @param page Results page you want to retrieve (0..N)
   * @param size Number of records per page
   * @param territory territory
   * @param sort Sorting option: field,[asc,desc]
   * @param txt txt
   */
  public searchPlayersUsingGET(args: {
    page: number;
    size: number;
    territory: string;
    sort?: string;
    txt?: string;
  }): Observable<PagePlayerInfo> {
    const { page, size, territory, sort, txt } = args;
    return this.http.request<PagePlayerInfo>(
      'get',
      environment.serverUrl.api + `/playandgo/api/ext/territory/players`,
      {
        params: removeNullOrUndefined({
          page,
          size,
          sort,
          txt,
          territory,
        }),
      }
    );
  }

  /**
   * subscribeCampaignByTerritory
   *
   * @param campaignId campaignId
   * @param nickname nickname
   * @param body
   */
  public subscribeCampaignByTerritoryUsingPOST(args: {
    campaignId: string;
    nickname: string;
    body?: any;
  }): Observable<CampaignSubscription> {
    const { campaignId, nickname, body } = args;
    return this.http.request<CampaignSubscription>(
      'post',
      environment.serverUrl.api +
      `/playandgo/api/ext/campaign/subscribe/territory`,
      {
        body,
        params: removeNullOrUndefined({
          campaignId,
          nickname,
        }),
      }
    );
  }

  /**
   * unsubscribeCampaignByTerritory
   *
   * @param campaignId campaignId
   * @param nickname nickname
   */
  public unsubscribeCampaignByTerritoryUsingDELETE(args: {
    campaignId: string;
    nickname: string;
  }): Observable<CampaignSubscription> {
    const { campaignId, nickname } = args;
    return this.http.request<CampaignSubscription>(
      'delete',
      environment.serverUrl.api +
      `/playandgo/api/ext/campaign/unsubscribe/territory`,
      {
        params: removeNullOrUndefined({
          campaignId,
          nickname,
        }),
      }
    );
  }
}

function removeNullOrUndefined(obj: any) {
  const newObj: any = {};
  Object.keys(obj).forEach((key) => {
    if (obj[key] != null) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
