/**
 * Play&Go Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class DevControllerService {
  constructor(private http: HttpClient) {}
  /**
   * addPlayers
   *
   */
  public addPlayersUsingPOST(): Observable<any> {
    return this.http.request<any>(
      'post',
      environment.serverUrl.api + `/playandgo/api/dev/players`,
      {}
    );
  }

  /**
   * addTracks
   *
   */
  public addTracksUsingPOST(): Observable<any> {
    return this.http.request<any>(
      'post',
      environment.serverUrl.api + `/playandgo/api/dev/tracks`,
      {}
    );
  }

  /**
   * subscribeAziendale
   *
   * @param campaignId campaignId
   * @param playerId playerId
   * @param companyKey companyKey
   * @param code code
   */
  public subscribeAziendaleUsingGET(
    campaignId: string,
    playerId: string,
    companyKey: string,
    code: string
  ): Observable<any> {
    return this.http.request<any>(
      'get',
      environment.serverUrl.api + `/playandgo/api/dev/azienda/subscribe`,
      {
        params: removeNullOrUndefined({
          campaignId,
          playerId,
          companyKey,
          code,
        }),
      }
    );
  }

  /**
   * testCampaignPlacingByTransportMode
   *
   */
  public testCampaignPlacingByTransportModeUsingGET(): Observable<any> {
    return this.http.request<any>(
      'get',
      environment.serverUrl.api + `/playandgo/api/dev/test/campaign/placing`,
      {}
    );
  }

  /**
   * unsubscribeAziendale
   *
   * @param campaignId campaignId
   * @param playerId playerId
   */
  public unsubscribeAziendaleUsingGET(
    campaignId: string,
    playerId: string
  ): Observable<any> {
    return this.http.request<any>(
      'get',
      environment.serverUrl.api + `/playandgo/api/dev/azienda/unsubscribe`,
      {
        params: removeNullOrUndefined({
          campaignId,
          playerId,
        }),
      }
    );
  }

  /**
   * validateAziendale
   *
   * @param campaignId campaignId
   * @param playerId playerId
   * @param trackedInstanceId trackedInstanceId
   * @param campaignPlayerTrackId campaignPlayerTrackId
   */
  public validateAziendaleUsingGET(
    campaignId: string,
    playerId: string,
    trackedInstanceId: string,
    campaignPlayerTrackId: string
  ): Observable<any> {
    return this.http.request<any>(
      'get',
      environment.serverUrl.api + `/playandgo/api/dev/azienda/validate`,
      {
        params: removeNullOrUndefined({
          campaignId,
          playerId,
          trackedInstanceId,
          campaignPlayerTrackId,
        }),
      }
    );
  }
}

function removeNullOrUndefined(obj: any) {
  const newObj: any = {};
  Object.keys(obj).forEach((key) => {
    if (obj[key] != null) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
