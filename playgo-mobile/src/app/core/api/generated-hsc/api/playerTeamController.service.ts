/**
 * Play&Go HSC Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

import { Avatar } from '../model/avatar';
import { Initiative } from '../model/initiative';
import { PagePlayerInfo } from '../model/pagePlayerInfo';
import { PlayerInfo } from '../model/playerInfo';
import { PlayerTeam } from '../model/playerTeam';


@Injectable({
  providedIn: 'root'
})
export class PlayerTeamControllerService {
    constructor(private http: HttpClient) {}
    /**
     * candidates
     * 
      * @param initiativeId initiativeId
 * @param page Results page you want to retrieve (0..N)
 * @param size Number of records per page
 * @param sort Sorting option: field,[asc,desc]
 * @param txt txt
     */
    public candidatesUsingGET(
          args:{
            initiativeId: string; page: number; size: number; sort?: string; txt?: string; 
          }
    ): Observable<PagePlayerInfo>
    {
        const {
          initiativeId , page , size , sort , txt , 
        } = args;
        return this.http.request<PagePlayerInfo>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/team/candidates`,
          {
              params: removeNullOrUndefined({
                  page,
                  size,
                  sort,
                  txt,
              }),
          }
        );
    }

    /**
     * checkSubscribeTeamMember
     * 
      * @param initiativeId initiativeId
 * @param nickname nickname
     */
    public checkSubscribeTeamMemberUsingGET(
          args:{
            initiativeId: string; nickname: string; 
          }
    ): Observable<boolean>
    {
        const {
          initiativeId , nickname , 
        } = args;
        return this.http.request<boolean>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/player/subscribe/check`,
          {
              params: removeNullOrUndefined({
                  nickname,
              }),
          }
        );
    }

    /**
     * deleteTeam
     * 
      * @param initiativeId initiativeId
 * @param teamId teamId
     */
    public deleteTeamUsingDELETE(
          args:{
            initiativeId: string; teamId: string; 
          }
    ): Observable<any>
    {
        const {
          initiativeId , teamId , 
        } = args;
        return this.http.request<any>(
          'delete',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/team/${encodeURIComponent(String(teamId))}`,
          {
          }
        );
    }

    /**
     * getInitative
     * 
      * @param initiativeId initiativeId
     */
    public getInitativeUsingGET(
        initiativeId: string, 
    ): Observable<Initiative>
    {
        return this.http.request<Initiative>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/model`,
          {
          }
        );
    }

    /**
     * getMyTeamInfo
     * 
      * @param initiativeId initiativeId
 * @param teamId teamId
     */
    public getMyTeamInfoUsingGET(
          args:{
            initiativeId: string; teamId: string; 
          }
    ): Observable<PlayerTeam>
    {
        const {
          initiativeId , teamId , 
        } = args;
        return this.http.request<PlayerTeam>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/team/${encodeURIComponent(String(teamId))}/my`,
          {
          }
        );
    }

    /**
     * getMyTeamsAsManager
     * 
      * @param initiativeId initiativeId
     */
    public getMyTeamsAsManagerUsingGET(
        initiativeId: string, 
    ): Observable<Array<PlayerTeam>>
    {
        return this.http.request<Array<PlayerTeam>>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/teams`,
          {
          }
        );
    }

    /**
     * getPlayerTeamInfo
     * 
      * @param initiativeId initiativeId
 * @param teamId teamId
     */
    public getPlayerTeamInfoUsingGET(
          args:{
            initiativeId: string; teamId: string; 
          }
    ): Observable<Array<PlayerInfo>>
    {
        const {
          initiativeId , teamId , 
        } = args;
        return this.http.request<Array<PlayerInfo>>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/team/${encodeURIComponent(String(teamId))}/info`,
          {
          }
        );
    }

    /**
     * getPublicTeamInfo
     * 
      * @param initiativeId initiativeId
 * @param teamId teamId
     */
    public getPublicTeamInfoUsingGET(
          args:{
            initiativeId: string; teamId: string; 
          }
    ): Observable<PlayerTeam>
    {
        const {
          initiativeId , teamId , 
        } = args;
        return this.http.request<PlayerTeam>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/team/${encodeURIComponent(String(teamId))}/public`,
          {
          }
        );
    }

    /**
     * getTeamAvatar
     * 
      * @param teamId teamId
     */
    public getTeamAvatarUsingGET(
        teamId: string, 
    ): Observable<Avatar>
    {
        return this.http.request<Avatar>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/team/${encodeURIComponent(String(teamId))}/avatar`,
          {
          }
        );
    }

    /**
     * initatives
     * 
          */
    public initativesUsingGET(
        
    ): Observable<Array<Initiative>>
    {
        return this.http.request<Array<Initiative>>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives`,
          {
          }
        );
    }

    /**
     * isAdmin
     * 
      * @param initiativeId initiativeId
     */
    public isAdminUsingGET(
        initiativeId: string, 
    ): Observable<boolean>
    {
        return this.http.request<boolean>(
          'get',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/admin`,
          {
          }
        );
    }

    /**
     * saveInitiative
     * 
      * @param initiativeId initiativeId
 * @param body 
     */
    public saveInitiativeUsingPUT(
          args:{
            initiativeId: string; body?: Initiative; 
          }
    ): Observable<Initiative>
    {
        const {
          initiativeId , body , 
        } = args;
        return this.http.request<Initiative>(
          'put',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}`,
          {
              body:body,
          }
        );
    }

    /**
     * saveTeam
     * 
      * @param initiativeId initiativeId
 * @param body 
     */
    public saveTeamUsingPOST(
          args:{
            initiativeId: string; body?: PlayerTeam; 
          }
    ): Observable<PlayerTeam>
    {
        const {
          initiativeId , body , 
        } = args;
        return this.http.request<PlayerTeam>(
          'post',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/team`,
          {
              body:body,
          }
        );
    }

    /**
     * setCreate
     * 
      * @param initiativeId initiativeId
 * @param value value
     */
    public setCreateUsingPUT(
          args:{
            initiativeId: string; value: boolean; 
          }
    ): Observable<Initiative>
    {
        const {
          initiativeId , value , 
        } = args;
        return this.http.request<Initiative>(
          'put',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/create/${encodeURIComponent(String(value))}`,
          {
          }
        );
    }

    /**
     * setEdit
     * 
      * @param initiativeId initiativeId
 * @param value value
     */
    public setEditUsingPUT(
          args:{
            initiativeId: string; value: boolean; 
          }
    ): Observable<Initiative>
    {
        const {
          initiativeId , value , 
        } = args;
        return this.http.request<Initiative>(
          'put',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/edit/${encodeURIComponent(String(value))}`,
          {
          }
        );
    }

    /**
     * subscribeTeamMember
     * 
      * @param initiativeId initiativeId
 * @param nickname nickname
     */
    public subscribeTeamMemberUsingPOST(
          args:{
            initiativeId: string; nickname: string; 
          }
    ): Observable<string>
    {
        const {
          initiativeId , nickname , 
        } = args;
        return this.http.request<string>(
          'post',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives/${encodeURIComponent(String(initiativeId))}/player/subscribe`,
          {
              params: removeNullOrUndefined({
                  nickname,
              }),
          }
        );
    }

    /**
     * syncInitatives
     * 
          */
    public syncInitativesUsingPUT(
        
    ): Observable<Array<Initiative>>
    {
        return this.http.request<Array<Initiative>>(
          'put',
          environment.serverUrl.api+`/playandgo-hsc/api/initiatives`,
          {
          }
        );
    }

    /**
     * uploadTeamAvatar
     * 
      * @param teamId teamId
 * @param body 
     */
    public uploadTeamAvatarUsingPOST(
          args:{
            teamId: string; body?: Object; 
          }
    ): Observable<Avatar>
    {
        const {
          teamId , body , 
        } = args;
        return this.http.request<Avatar>(
          'post',
          environment.serverUrl.api+`/playandgo-hsc/api/team/${encodeURIComponent(String(teamId))}/avatar`,
          {
              body:body,
          }
        );
    }

}

function removeNullOrUndefined(obj: any) {
  const newObj: any = {};
  Object.keys(obj).forEach((key) => {
    if (obj[key] != null) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}

