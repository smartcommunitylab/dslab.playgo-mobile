/**
 * Play&Go HSC Project
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: info@smartcommunitylab.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { environment } from 'src/environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AdminControllerService {
  constructor(private http: HttpClient) {}
  /**
   * subscribeTeamMember
   *
   * @param initiativeId initiativeId
   * @param nickname nickname
   * @param teamId teamId
   */
  public subscribeTeamMemberUsingPOST(args: {
    initiativeId: string;
    nickname: string;
    teamId: string;
  }): Observable<string> {
    const { initiativeId, nickname, teamId } = args;
    return this.http.request<string>(
      'post',
      environment.serverUrl.hscApi +
        `/playandgo-hsc/api/admin/initiatives/${encodeURIComponent(
          String(initiativeId)
        )}/player/subscribe`,
      {
        params: removeNullOrUndefined({
          nickname,
          teamId,
        }),
      }
    );
  }

  /**
   * unregisterPlayer
   *
   * @param initiativeId initiativeId
   * @param playerId playerId
   * @param nickname nickname
   */
  public unregisterPlayerUsingPOST(args: {
    initiativeId: string;
    playerId: string;
    nickname: string;
  }): Observable<any> {
    const { initiativeId, playerId, nickname } = args;
    return this.http.request<any>(
      'post',
      environment.serverUrl.hscApi +
        `/playandgo-hsc/api/admin/initiatives/${encodeURIComponent(
          String(initiativeId)
        )}/player/unregister`,
      {
        params: removeNullOrUndefined({
          playerId,
          nickname,
        }),
      }
    );
  }

  /**
   * unsubscribeTeamMember
   *
   * @param initiativeId initiativeId
   * @param nickname nickname
   */
  public unsubscribeTeamMemberUsingPOST(args: {
    initiativeId: string;
    nickname: string;
  }): Observable<any> {
    const { initiativeId, nickname } = args;
    return this.http.request<any>(
      'post',
      environment.serverUrl.hscApi +
        `/playandgo-hsc/api/admin/initiatives/${encodeURIComponent(
          String(initiativeId)
        )}/player/unsubscribe`,
      {
        params: removeNullOrUndefined({
          nickname,
        }),
      }
    );
  }
}

function removeNullOrUndefined(obj: any) {
  const newObj: any = {};
  Object.keys(obj).forEach((key) => {
    if (obj[key] != null) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
